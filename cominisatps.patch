diff -urB cominisatps-SAT2016/core/Solver.cc cominisatps/core/Solver.cc
--- cominisatps-SAT2016/core/Solver.cc	2016-05-02 03:22:00.000000000 +0200
+++ cominisatps/core/Solver.cc	2020-05-22 12:12:13.549838808 +0200
@@ -150,6 +150,7 @@
     trail    .capacity(v+1);
     setDecisionVar(v, dvar);
 
+    assump.push(false);
     // Additional space needed for stamping.
     // TODO: allocate exact memory.
     seen      .push(0);
@@ -550,16 +551,20 @@
 |    Specialized analysis procedure to express the final conflict in terms of assumptions.
 |    Calculates the (possibly empty) set of assumptions that led to the assignment of 'p', and
 |    stores the result in 'out_conflict'.
+|
+|  void Solver::analyzeFinal(Lit p, vec<Lit>& out_conflict)
 |________________________________________________________________________________________________@*/
-void Solver::analyzeFinal(Lit p, vec<Lit>& out_conflict)
+void Solver::analyzeFinal(CRef confl, vec<Lit>& out_conflict)
 {
     out_conflict.clear();
-    out_conflict.push(p);
 
     if (decisionLevel() == 0)
         return;
 
-    seen[var(p)] = 1;
+    Clause& cl = ca[confl];
+    for (int j = 0; j < cl.size(); j++)
+        if (level(var(cl[j])) > 0)
+            seen[var(cl[j])] = 1;
 
     for (int i = trail.size()-1; i >= trail_lim[0]; i--){
         Var x = var(trail[i]);
@@ -577,7 +582,9 @@
         }
     }
 
-    seen[var(p)] = 0;
+    for (int j = cl.size() == 2 ? 0 : 1; j < cl.size(); j++)
+        if (level(var(cl[j])) > 0)
+            seen[var(cl[j])] = 0;
 }
 
 
@@ -650,12 +656,22 @@
                 *j++ = w; continue; }
 
             // Look for new watch:
+            int choosenPos = -1, maxAssumpLevel = assumptions.size() > 0 ? 1 : 0;
             for (int k = 2; k < c.size(); k++)
                 if (value(c[k]) != l_False){
-                    c[1] = c[k]; c[k] = false_lit;
-                    watches[~c[1]].push(w);
-                    goto NextClause; }
-
+                    choosenPos = k;
+                    if(decisionLevel()>maxAssumpLevel || value(c[k])==l_True || !assump[var(c[k])]) 
+                        break; }
+            if(choosenPos!=-1) {
+                c[1] = c[choosenPos]; c[choosenPos] = false_lit;
+                watches[~c[1]].push(w);
+                goto NextClause; }
+             /*   for (int k = 2; k < c.size(); k++)
+                    if (value(c[k]) != l_False){
+                        c[1] = c[k]; c[k] = false_lit;
+                        watches[~c[1]].push(w);
+                        goto NextClause; }
+*/
             // Did not find watch -- clause is unit under assignment:
             *j++ = w;
             if (value(first) == l_False){
@@ -789,7 +804,8 @@
         ok = stampAll(true);
 
     checkGarbage();
-    rebuildOrderHeap();
+    if ((int)dec_vars - nAssigns() < (glucose_restart ? order_heap_glue_r : order_heap_no_r).size() / 2) // M. Piotrow 20.07.2017
+        rebuildOrderHeap();
 
     simpDB_assigns = nAssigns();
     simpDB_props   = clauses_literals + learnts_literals;   // (shouldn't depend on stats really, but it will do for now)
@@ -933,6 +949,7 @@
             conflicts++; nof_conflicts--;
             if (conflicts == 100000 && learnts_core.size() < 100) core_lbd_cut = 5;
             if (decisionLevel() == 0) return l_False;
+            if (decisionLevel() == 1) { analyzeFinal(confl, conflict); return l_False; }
 
             learnt_clause.clear();
             analyze(confl, learnt_clause, backtrack_level, lbd);
@@ -998,7 +1015,7 @@
                 restart = lbd_queue.full() && (lbd_queue.avg() * K > global_lbd_sum / conflicts_glue);
                 cached = true;
             }
-            if (restart /*|| !withinBudget()*/){
+            if (restart || !withinBudget()){
                 lbd_queue.clear();
                 // Reached bound on number of conflicts:
                 progress_estimate = progressEstimate();
@@ -1017,22 +1034,18 @@
                 reduceDB(); }
 
             Lit next = lit_Undef;
-            /*while (decisionLevel() < assumptions.size()){
-                // Perform user provided assumption:
-                Lit p = assumptions[decisionLevel()];
-                if (value(p) == l_True){
-                    // Dummy decision level:
-                    newDecisionLevel();
-                }else if (value(p) == l_False){
-                    analyzeFinal(~p, conflict);
-                    return l_False;
-                }else{
-                    next = p;
-                    break;
+
+            if (decisionLevel() == 0) {
+                newDecisionLevel();
+                for (int i = 0; i < assumptions.size(); i++) {
+                    Lit p = assumptions[i];
+                    if (value(p) == l_False) { conflict.push(~p); return l_False; }
+                    else if (value(p) != l_True) uncheckedEnqueue(p);
                 }
+                continue;
             }
 
-            if (next == lit_Undef)*/{
+            if (next == lit_Undef){
                 // New variable decision:
                 decisions++;
                 next = pickBranchLit();
@@ -1101,25 +1114,23 @@
 
     solves++;
 
+    for (int i = 0; i <assumptions.size(); i++)
+        assump[var(assumptions[i])] = true;
+
     max_learnts               = nClauses() * learntsize_factor;
     learntsize_adjust_confl   = learntsize_adjust_start_confl;
     learntsize_adjust_cnt     = (int)learntsize_adjust_confl;
     lbool   status            = l_Undef;
 
-    if (verbosity >= 1){
-        printf("c ============================[ Search Statistics ]==============================\n");
-        printf("c | Conflicts |          ORIGINAL         |          LEARNT          | Progress |\n");
-        printf("c |           |    Vars  Clauses Literals |    Limit  Clauses Lit/Cl |          |\n");
-        printf("c ===============================================================================\n");
-    }
+    if (verbosity >= 1)
+        printf("c ======================[ COMiniSatPS search starting  ]========================\n");
 
     add_tmp.clear();
-
     glucose_restart = true;
     int init = 10000;
-    while (status == l_Undef && init > 0 /*&& withinBudget()*/)
+    while (status == l_Undef && init > 0 && withinBudget())
        status = search(init);
-    glucose_restart = false;
+    if (status == l_Undef && withinBudget()) glucose_restart = false;
 
     // Search:
     int phase_allotment = 100;
@@ -1127,9 +1138,9 @@
         int weighted = glucose_restart ? phase_allotment * 2 : phase_allotment;
         fflush(stdout);
 
-        while (status == l_Undef && weighted > 0 /*&& withinBudget()*/)
+        while (status == l_Undef && weighted > 0 && withinBudget())
             status = search(weighted);
-        if (status != l_Undef /*|| !withinBudget()*/)
+        if (status != l_Undef || !withinBudget())
             break; // Should break here for correctness in incremental SAT solving.
 
         glucose_restart = !glucose_restart;
@@ -1137,9 +1148,6 @@
             phase_allotment += phase_allotment / 10;
     }
 
-    if (verbosity >= 1)
-        printf("c ===============================================================================\n");
-
 #ifdef BIN_DRUP
     if (drup_file && status == l_False) binDRUP_flush(drup_file);
 #endif
diff -urB cominisatps-SAT2016/core/Solver.h cominisatps/core/Solver.h
--- cominisatps-SAT2016/core/Solver.h	2016-05-02 03:22:00.000000000 +0200
+++ cominisatps/core/Solver.h	2020-05-15 13:03:07.461337927 +0200
@@ -228,6 +228,7 @@
     OccLists<Lit, vec<Watcher>, WatcherDeleted>
                         watches_bin,      // Watches for binary clauses only.
                         watches;          // 'watches[lit]' is a list of constraints watching 'lit' (will go there if literal becomes true).
+    vec<bool>           assump;           // Declares if a variable is an assumption variable or not.
     vec<lbool>          assigns;          // The current assignments.
     vec<char>           polarity;         // The preferred polarity of each variable.
     vec<char>           decision;         // Declares if a variable is eligible for selection in the decision heuristic.
@@ -284,7 +285,7 @@
     CRef     propagate        ();                                                      // Perform unit propagation. Returns possibly conflicting clause.
     void     cancelUntil      (int level);                                             // Backtrack until a certain level.
     void     analyze          (CRef confl, vec<Lit>& out_learnt, int& out_btlevel, int& out_lbd);    // (bt = backtrack)
-    void     analyzeFinal     (Lit p, vec<Lit>& out_conflict);                         // COULD THIS BE IMPLEMENTED BY THE ORDINARIY "analyze" BY SOME REASONABLE GENERALIZATION?
+    void     analyzeFinal(CRef confl, vec<Lit>& out_conflict);
     bool     litRedundant     (Lit p, uint32_t abstract_levels);                       // (helper method for 'analyze()')
     lbool    search           (int& nof_conflicts);                                    // Search for a given number of conflicts.
     lbool    solve_           ();                                                      // Main solve method (assumptions given in 'assumptions').
diff -urB cominisatps-SAT2016/mtl/template.mk cominisatps/mtl/template.mk
--- cominisatps-SAT2016/mtl/template.mk	2016-05-02 03:22:00.000000000 +0200
+++ cominisatps/mtl/template.mk	2019-12-20 11:21:39.252626781 +0100
@@ -44,7 +44,7 @@
 %.o:			CFLAGS +=$(COPTIMIZE) -g -D DEBUG
 %.op:			CFLAGS +=$(COPTIMIZE) -pg -g -D NDEBUG
 %.od:			CFLAGS +=-O0 -g -D DEBUG
-%.or:			CFLAGS +=$(COPTIMIZE) -g -D NDEBUG
+%.or:			CFLAGS +=$(COPTIMIZE)  -D NDEBUG
 
 ## Link options
 $(EXEC):		LFLAGS += -g
diff -urB cominisatps-SAT2016/simp/SimpSolver.cc cominisatps/simp/SimpSolver.cc
--- cominisatps-SAT2016/simp/SimpSolver.cc	2016-05-02 03:22:00.000000000 +0200
+++ cominisatps/simp/SimpSolver.cc	2019-08-22 15:35:41.645730910 +0200
@@ -636,6 +636,7 @@
     int iter = 0;
     int n_cls, n_cls_init, n_vars;
 
+    printf("c Using COMiniSatPS SAT solver by Chanseok Oh (2016)\n");
     if (nVars() == 0) goto cleanup; // User disabling preprocessing.
 
     // Get an initial number of clauses (more accurately).
@@ -648,10 +649,10 @@
     n_cls  = nClauses();
     n_vars = nFreeVars();
 
-    printf("c Reduced to %d vars, %d cls (grow=%d)\n", n_vars, n_cls, grow);
+    if (verbosity >= 1) printf("c COMiniSatPS: Reduced to %d vars, %d cls (grow=%d)\n", n_vars, n_cls, grow);
 
     if ((double)n_cls / n_vars >= 10 || n_vars < 10000){
-        printf("c No iterative elimination performed. (vars=%d, c/v ratio=%.1f)\n", n_vars, (double)n_cls / n_vars);
+        if (verbosity >= 1) printf("c COMiniSatPS: No iterative elimination performed. (vars=%d, c/v ratio=%.1f)\n", n_vars, (double)n_cls / n_vars);
         goto cleanup; }
 
     grow = grow ? grow * 2 : 8;
@@ -678,12 +679,12 @@
         double cl_inc_rate  = (double)n_cls_now   / n_cls_last;
         double var_dec_rate = (double)n_vars_last / n_vars_now;
 
-        printf("c Reduced to %d vars, %d cls (grow=%d)\n", n_vars_now, n_cls_now, grow);
-        printf("c cl_inc_rate=%.3f, var_dec_rate=%.3f\n", cl_inc_rate, var_dec_rate);
+        if (verbosity >= 1) printf("c COMiniSatPS: Reduced to %d vars, %d cls (grow=%d)\n", n_vars_now, n_cls_now, grow);
+        if (verbosity >= 1) printf("c COMiniSatPS: cl_inc_rate=%.3f, var_dec_rate=%.3f\n", cl_inc_rate, var_dec_rate);
 
         if (n_cls_now > n_cls_init || cl_inc_rate > var_dec_rate) break;
     }
-    printf("c No. effective iterative eliminations: %d\n", iter);
+    if (verbosity >= 1) printf("c COMiniSatPS: No. effective iterative eliminations: %d\n", iter);
 
 cleanup:
     touched  .clear(true);
diff -urB cominisatps-SAT2016/utils/Options.h cominisatps/utils/Options.h
--- cominisatps-SAT2016/utils/Options.h	2016-05-02 03:22:00.000000000 +0200
+++ cominisatps/utils/Options.h	2019-01-14 16:42:05.047516560 +0100
@@ -282,15 +282,15 @@
         if (range.begin == INT64_MIN)
             fprintf(stderr, "imin");
         else
-            fprintf(stderr, "%4"PRIi64, range.begin);
+            fprintf(stderr, "%4" PRIi64, range.begin);
 
         fprintf(stderr, " .. ");
         if (range.end == INT64_MAX)
             fprintf(stderr, "imax");
         else
-            fprintf(stderr, "%4"PRIi64, range.end);
+            fprintf(stderr, "%4" PRIi64, range.end);
 
-        fprintf(stderr, "] (default: %"PRIi64")\n", value);
+        fprintf(stderr, "] (default: %" PRIi64")\n", value);
         if (verbose){
             fprintf(stderr, "\n        %s\n", description);
             fprintf(stderr, "\n");
